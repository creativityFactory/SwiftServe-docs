"use strict";(self.webpackChunkswift_serve_docs=self.webpackChunkswift_serve_docs||[]).push([[434],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=p(n),m=r,f=c["".concat(s,".").concat(m)]||c[m]||u[m]||i;return n?a.createElement(f,o(o({ref:t},d),{},{components:n})):a.createElement(f,o({ref:t},d))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1169:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const i={sidebar_position:3},o="Complex design",l={unversionedId:"tutorial-web-services/complex-design",id:"tutorial-web-services/complex-design",title:"Complex design",description:"In the last example, the created REST API was only from one model, which was a simple example to demonstrate how to the automatic creation is done. Now we will create a little more complex design :",source:"@site/docs/tutorial-web-services/complex-design.md",sourceDirName:"tutorial-web-services",slug:"/tutorial-web-services/complex-design",permalink:"/SwiftServe-docs/docs/tutorial-web-services/complex-design",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorial-web-services/complex-design.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Automate the creation of a REST API",permalink:"/SwiftServe-docs/docs/tutorial-web-services/automatic-rest"}},s={},p=[],d={toc:p},c="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"complex-design"},"Complex design"),(0,r.kt)("p",null,"In the last example, the created REST API was only from one model, which was a simple example to demonstrate how to the automatic creation is done. Now we will create a little more complex design :"),(0,r.kt)("p",null,"Here our class from the last example ",(0,r.kt)("inlineCode",{parentName:"p"},"Todo"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Todo.java"',title:'"Todo.java"'},"@Rest\n@FromDataSource\npublic class Todo {\n  private Integer id;\n  private String content;\n  private Boolean completed;\n  @BelongTo\n  private User user;\n}\n")),(0,r.kt)("p",null,"Here the new class ",(0,r.kt)("inlineCode",{parentName:"p"},"User"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="User.java"',title:'"User.java"'},"@Rest\n@FromDataSource\npublic class User {\n  String private id;\n  private String name;\n  @HasMany\n  private List<Todo> todos;\n}\n")),(0,r.kt)("p",null,"Let's to generate the REST API:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="MyApplication.java"',title:'"MyApplication.java"'},'@WebServlet("/*")\npublic class MyApplication extends Application {\n  @Override\n  protected void execute() throws Exception {\n    generateRest();\n  }\n}\n')),(0,r.kt)("p",null,"In this example we have a design: ",(0,r.kt)("inlineCode",{parentName:"p"},"a user has many todos")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"todo belongs to a user"),", this means the relationship of One-To-Many."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+------+               +------+\n| User | 1 --------- * | Todo |\n+------+               +------+\n")),(0,r.kt)("p",null,"This will generate a REST API with the next endpoints:"),(0,r.kt)("p",null,"for ",(0,r.kt)("inlineCode",{parentName:"p"},"Todo")," model:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"GET /todos"),": get all todos"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"GET /todos?limit=n"),": get todos limited to n."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"GET /todos/:id"),": get a todo by id."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"POST /todos"),": add a new todo."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"PUT /todos/:id"),": update all the field of an existed todo."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"PATCH /todos/:id"),": update one field from an existed todo."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"DELETE /todos/:id"),": delete an existed todo.")),(0,r.kt)("p",null,"for ",(0,r.kt)("inlineCode",{parentName:"p"},"User")," model:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"GET /users"),": get all users"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"GET /users?limit=n"),": get users limited to n."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"GET /users/:id/todos"),": get all todos of user with matched id."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"GET /users/:id"),": get a user by id."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"POST /users"),": add a new user."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"PUT /users/:id"),": update all the field of an existed user."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"PATCH /users/:id"),": update one field from an existed user."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"DELETE /users/:id"),": delete an existed user.")))}u.isMDXComponent=!0}}]);