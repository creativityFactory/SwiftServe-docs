"use strict";(self.webpackChunkswift_serve_docs=self.webpackChunkswift_serve_docs||[]).push([[982],{3905:(e,t,o)=>{o.d(t,{Zo:()=>p,kt:()=>f});var n=o(7294);function r(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function s(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){r(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function l(e,t){if(null==e)return{};var o,n,r=function(e,t){if(null==e)return{};var o,n,r={},a=Object.keys(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||(r[o]=e[o]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var i=n.createContext({}),d=function(e){var t=n.useContext(i),o=t;return e&&(o="function"==typeof e?e(t):s(s({},t),e)),o},p=function(e){var t=d(e.components);return n.createElement(i.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var o=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=d(o),m=r,f=c["".concat(i,".").concat(m)]||c[m]||u[m]||a;return o?n.createElement(f,s(s({ref:t},p),{},{components:o})):n.createElement(f,s({ref:t},p))}));function f(e,t){var o=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=o.length,s=new Array(a);s[0]=m;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[c]="string"==typeof e?e:r,s[1]=l;for(var d=2;d<a;d++)s[d]=o[d];return n.createElement.apply(null,s)}return n.createElement.apply(null,o)}m.displayName="MDXCreateElement"},3286:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>d});var n=o(7462),r=(o(7294),o(3905));const a={sidebar_position:1},s="Creation of a REST API manually",l={unversionedId:"tutorial-web-services/manuelly-rest",id:"tutorial-web-services/manuelly-rest",title:"Creation of a REST API manually",description:"SwiftServe offers a simple and efficient way to create web services in form of REST API. In this example we will try to create a REST API for a model called Todo. Let's start to see the simplicity.",source:"@site/docs/tutorial-web-services/manuelly-rest.md",sourceDirName:"tutorial-web-services",slug:"/tutorial-web-services/manuelly-rest",permalink:"/docs/tutorial-web-services/manuelly-rest",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorial-web-services/manuelly-rest.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Tutorial - REST APIs",permalink:"/docs/category/tutorial---rest-apis"},next:{title:"Automate the creation of a REST API",permalink:"/docs/tutorial-web-services/automatic-rest"}},i={},d=[],p={toc:d},c="wrapper";function u(e){let{components:t,...o}=e;return(0,r.kt)(c,(0,n.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"creation-of-a-rest-api-manually"},"Creation of a REST API manually"),(0,r.kt)("p",null,"SwiftServe offers a simple and efficient way to create web services in form of REST API. In this example we will try to create a REST API for a model called ",(0,r.kt)("inlineCode",{parentName:"p"},"Todo"),". Let's start to see the simplicity."),(0,r.kt)("p",null,"Here we have the model ",(0,r.kt)("inlineCode",{parentName:"p"},"Todo.java")," :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public class Todo {\n  private Integer id;\n  private String content;\n  private Boolean completed;\n  // ... ctor, setters & getters\n}\n")),(0,r.kt)("p",null,"Let's assume that we have a dao oject for persistence tier named ",(0,r.kt)("inlineCode",{parentName:"p"},"todoDao"),"."),(0,r.kt)("p",null,"For ",(0,r.kt)("inlineCode",{parentName:"p"},"GET /todos")," :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public class GetAllTodo implements HttpRequestHandler {\n  @Override\n  public void method(Request req, Response res) {\n      // ... \n      List<Todo> todos = todoDao.getAll();\n      res.json(todos);\n  }\n}\n")),(0,r.kt)("p",null,"For ",(0,r.kt)("inlineCode",{parentName:"p"},"GET /todos/:id")," :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'public class GetTodoById implements HttpRequestHandler {\n  @Override\n  public void method(Request req, Response res) {\n      // ... \n      String id = req.params("id");\n      Todo todo = todoDao.getById(id);\n      res.json(todo);\n  }\n}\n')),(0,r.kt)("p",null,"For ",(0,r.kt)("inlineCode",{parentName:"p"},"POST /todos/")," :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public class AddTodo implements HttpRequestHandler {\n  @Override\n  public void method(Request req, Response res) {\n      // ... \n      Todo todo = (Todo) req.body(Todo.class);\n      Todo savedTodo = todoDa.save(todo);\n      res.status(201)\n        .json(savedTodo);\n  }\n}\n")),(0,r.kt)("p",null,"For ",(0,r.kt)("inlineCode",{parentName:"p"},"PUT /todos/:id")," :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'public class UpdateTodo implements HttpRequestHandler {\n  @Override\n  public void method(Request req, Response res) {\n      // ... \n      String id = req.params("id");\n      Todo todo = (Todo) req.body(Todo.class);\n      todo.setId(id);\n      Todo updatedTodo = todoDao.update(todo);\n      res.json(updatedTodo);\n  }\n}\n')),(0,r.kt)("p",null,"For ",(0,r.kt)("inlineCode",{parentName:"p"},"DLETE /todos/:id")," :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'public class DeleteTodo implements HttpRequestHandler {\n  @Override\n  public void method(Request req, Response res) {\n      // ... \n      String id = req.params("id");\n      Todo todo = todoDao.getById(id);\n      Todo deleted = todoDao.delete(todo);\n      res.json(updatedTodo);\n  }\n}\n')),(0,r.kt)("p",null,"For now let's do the route mapping in our controller:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'@WebServlet("/*")\npublic class MyApplication extends Application {\n  @Override\n  protected void execute() {\n    get("/todos", new GetAllTodo());\n    get("/todos/:id", new GetTodoById());\n    post("/todos", new AddTodo());\n    put("/todos/:id", new UpdateTodo());\n    delete("/todos/:id", new DeleteTodo());\n  }\n}\n')),(0,r.kt)("p",null,"Maybe this was not a great example but it still simple and easy to understand the mecanism, and we will see next how this hard and repetitive work can be done by SwiftServe."))}u.isMDXComponent=!0}}]);