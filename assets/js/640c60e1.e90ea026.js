"use strict";(self.webpackChunkswift_serve_docs=self.webpackChunkswift_serve_docs||[]).push([[761],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>f});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(r),m=a,f=u["".concat(l,".").concat(m)]||u[m]||d[m]||o;return r?n.createElement(f,i(i({ref:t},c),{},{components:r})):n.createElement(f,i({ref:t},c))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},5263:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var n=r(7462),a=(r(7294),r(3905));const o={sidebar_position:4},i="Extract the request body",s={unversionedId:"tutorial-basics/request-body",id:"tutorial-basics/request-body",title:"Extract the request body",description:"With SwiftServe you can extract the request body in a simple way basing on the mime-type of request for safety.",source:"@site/docs/tutorial-basics/request-body.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/request-body",permalink:"/SwiftServe-docs/docs/tutorial-basics/request-body",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorial-basics/request-body.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Queries and route parameters",permalink:"/SwiftServe-docs/docs/tutorial-basics/queries-params"},next:{title:"Route mapping",permalink:"/SwiftServe-docs/docs/tutorial-basics/route-mapping"}},l={},p=[{value:"Form-data format",id:"form-data-format",level:4},{value:"Json format",id:"json-format",level:4},{value:"String format",id:"string-format",level:4},{value:"Url-encoded format",id:"url-encoded-format",level:4},{value:"Instance of the specified class",id:"instance-of-the-specified-class",level:4}],c={toc:p},u="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(u,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"extract-the-request-body"},"Extract the request body"),(0,a.kt)("p",null,"With SwiftServe you can extract the request body in a simple way basing on the mime-type of request for safety."),(0,a.kt)("p",null,"Here is a list of example of extracting request body in different ways:"),(0,a.kt)("h4",{id:"form-data-format"},"Form-data format"),(0,a.kt)("p",null,"For form-data we call the method ",(0,a.kt)("inlineCode",{parentName:"p"},"formDataBody()")," which return a Map."),(0,a.kt)("p",null,"Here is an example: "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public class MyAction implements HttpRequestHandler {\n  @Override\n  public void method(Request req, Response res) {\n      Map<String, String> body = req.formDataBody();\n      // ...\n  }\n}\n")),(0,a.kt)("h4",{id:"json-format"},"Json format"),(0,a.kt)("p",null,"For json format we call the method ",(0,a.kt)("inlineCode",{parentName:"p"},"jsonBody()")," which return a String in form of json."),(0,a.kt)("p",null,"Here is an example: "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public class MyAction implements HttpRequestHandler {\n  @Override\n  public void method(Request req, Response res) {\n      String body = req.jsonBody();\n      // ...\n  }\n}\n")),(0,a.kt)("h4",{id:"string-format"},"String format"),(0,a.kt)("p",null,"We can extract the request of request without depending on its mime-type. For this, we use\nthe method ",(0,a.kt)("inlineCode",{parentName:"p"},"body()")," that parse the request body from a ",(0,a.kt)("inlineCode",{parentName:"p"},"InputStream")," and convert it to String."),(0,a.kt)("p",null,"Here is an example: "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public class MyAction implements HttpRequestHandler {\n  @Override\n  public void method(Request req, Response res) {\n      String body = req.body();\n      // ...\n  }\n}\n")),(0,a.kt)("h4",{id:"url-encoded-format"},"Url-encoded format"),(0,a.kt)("p",null,"For url-encoded format we call the method ",(0,a.kt)("inlineCode",{parentName:"p"},"urlEncodedFormatBody()")," which return a String in form of key-value separed by ",(0,a.kt)("inlineCode",{parentName:"p"},"="),"."),(0,a.kt)("p",null,"Here is an example: "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public class MyAction implements HttpRequestHandler {\n  @Override\n  public void method(Request req, Response res) {\n      String body = req.urlEncodedFormatBody();\n      // ...\n  }\n}\n")),(0,a.kt)("h4",{id:"instance-of-the-specified-class"},"Instance of the specified class"),(0,a.kt)("p",null,"SwiftServe provides a way to parse the body of the request and maps it to an instance of the specified class."),(0,a.kt)("p",null,"Here is an example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public class Book {\n  private String isbn;\n  private String title;\n  // ...\n}\n")),(0,a.kt)("p",null,"If the request is in form of json format and you want to parse it and map it to an instance of ",(0,a.kt)("inlineCode",{parentName:"p"},"Book")," :"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public class MyAction implements HttpRequestHandler {\n  @Override\n  public void method(Request req, Response res) {\n      Book book = (Book) req.body(Book.class);\n      // ...\n  }\n}\n")),(0,a.kt)("p",null,"We are working to support other format..."))}d.isMDXComponent=!0}}]);